//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GameClient.GameServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Question", Namespace="http://schemas.datacontract.org/2004/07/GameService")]
    [System.SerializableAttribute()]
    public partial class Question : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int QuestionnoField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Questionno {
            get {
                return this.QuestionnoField;
            }
            set {
                if ((this.QuestionnoField.Equals(value) != true)) {
                    this.QuestionnoField = value;
                    this.RaisePropertyChanged("Questionno");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GameServiceReference.IGamePlay", CallbackContract=typeof(GameClient.GameServiceReference.IGamePlayCallback))]
    public interface IGamePlay {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGamePlay/AssignClient", ReplyAction="http://tempuri.org/IGamePlay/AssignClientResponse")]
        void AssignClient();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGamePlay/AssignClient", ReplyAction="http://tempuri.org/IGamePlay/AssignClientResponse")]
        System.Threading.Tasks.Task AssignClientAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGamePlay/PauseGame", ReplyAction="http://tempuri.org/IGamePlay/PauseGameResponse")]
        void PauseGame();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGamePlay/PauseGame", ReplyAction="http://tempuri.org/IGamePlay/PauseGameResponse")]
        System.Threading.Tasks.Task PauseGameAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGamePlay/AnswerQuestion", ReplyAction="http://tempuri.org/IGamePlay/AnswerQuestionResponse")]
        void AnswerQuestion(string clientname, GameClient.GameServiceReference.Question q, string answer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGamePlay/AnswerQuestion", ReplyAction="http://tempuri.org/IGamePlay/AnswerQuestionResponse")]
        System.Threading.Tasks.Task AnswerQuestionAsync(string clientname, GameClient.GameServiceReference.Question q, string answer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGamePlay/ShuffleQuestion", ReplyAction="http://tempuri.org/IGamePlay/ShuffleQuestionResponse")]
        GameClient.GameServiceReference.Question ShuffleQuestion(GameClient.GameServiceReference.Question[] s);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGamePlay/ShuffleQuestion", ReplyAction="http://tempuri.org/IGamePlay/ShuffleQuestionResponse")]
        System.Threading.Tasks.Task<GameClient.GameServiceReference.Question> ShuffleQuestionAsync(GameClient.GameServiceReference.Question[] s);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGamePlay/StartGame", ReplyAction="http://tempuri.org/IGamePlay/StartGameResponse")]
        void StartGame(string clientname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGamePlay/StartGame", ReplyAction="http://tempuri.org/IGamePlay/StartGameResponse")]
        System.Threading.Tasks.Task StartGameAsync(string clientname);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGamePlayCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGamePlay/AddClient", ReplyAction="http://tempuri.org/IGamePlay/AddClientResponse")]
        void AddClient(string s);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGamePlay/Message", ReplyAction="http://tempuri.org/IGamePlay/MessageResponse")]
        string Message(string m);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGamePlay/AskQuestion", ReplyAction="http://tempuri.org/IGamePlay/AskQuestionResponse")]
        void AskQuestion(GameClient.GameServiceReference.Question q);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGamePlayChannel : GameClient.GameServiceReference.IGamePlay, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GamePlayClient : System.ServiceModel.DuplexClientBase<GameClient.GameServiceReference.IGamePlay>, GameClient.GameServiceReference.IGamePlay {
        
        public GamePlayClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public GamePlayClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public GamePlayClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GamePlayClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GamePlayClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void AssignClient() {
            base.Channel.AssignClient();
        }
        
        public System.Threading.Tasks.Task AssignClientAsync() {
            return base.Channel.AssignClientAsync();
        }
        
        public void PauseGame() {
            base.Channel.PauseGame();
        }
        
        public System.Threading.Tasks.Task PauseGameAsync() {
            return base.Channel.PauseGameAsync();
        }
        
        public void AnswerQuestion(string clientname, GameClient.GameServiceReference.Question q, string answer) {
            base.Channel.AnswerQuestion(clientname, q, answer);
        }
        
        public System.Threading.Tasks.Task AnswerQuestionAsync(string clientname, GameClient.GameServiceReference.Question q, string answer) {
            return base.Channel.AnswerQuestionAsync(clientname, q, answer);
        }
        
        public GameClient.GameServiceReference.Question ShuffleQuestion(GameClient.GameServiceReference.Question[] s) {
            return base.Channel.ShuffleQuestion(s);
        }
        
        public System.Threading.Tasks.Task<GameClient.GameServiceReference.Question> ShuffleQuestionAsync(GameClient.GameServiceReference.Question[] s) {
            return base.Channel.ShuffleQuestionAsync(s);
        }
        
        public void StartGame(string clientname) {
            base.Channel.StartGame(clientname);
        }
        
        public System.Threading.Tasks.Task StartGameAsync(string clientname) {
            return base.Channel.StartGameAsync(clientname);
        }
    }
}
