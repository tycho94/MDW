//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GameClient.GameServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Question", Namespace="http://schemas.datacontract.org/2004/07/GameService")]
    [System.SerializableAttribute()]
    public partial class Question : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] answersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string questionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string rightAnswerField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] answers {
            get {
                return this.answersField;
            }
            set {
                if ((object.ReferenceEquals(this.answersField, value) != true)) {
                    this.answersField = value;
                    this.RaisePropertyChanged("answers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string question {
            get {
                return this.questionField;
            }
            set {
                if ((object.ReferenceEquals(this.questionField, value) != true)) {
                    this.questionField = value;
                    this.RaisePropertyChanged("question");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string rightAnswer {
            get {
                return this.rightAnswerField;
            }
            set {
                if ((object.ReferenceEquals(this.rightAnswerField, value) != true)) {
                    this.rightAnswerField = value;
                    this.RaisePropertyChanged("rightAnswer");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GameServiceReference.IGamePlay")]
    public interface IGamePlay {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGamePlay/AssignClient", ReplyAction="http://tempuri.org/IGamePlay/AssignClientResponse")]
        void AssignClient();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGamePlay/AssignClient", ReplyAction="http://tempuri.org/IGamePlay/AssignClientResponse")]
        System.Threading.Tasks.Task AssignClientAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGamePlay/PauseGame", ReplyAction="http://tempuri.org/IGamePlay/PauseGameResponse")]
        void PauseGame();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGamePlay/PauseGame", ReplyAction="http://tempuri.org/IGamePlay/PauseGameResponse")]
        System.Threading.Tasks.Task PauseGameAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGamePlay/GetQuestion", ReplyAction="http://tempuri.org/IGamePlay/GetQuestionResponse")]
        GameClient.GameServiceReference.Question GetQuestion();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGamePlay/GetQuestion", ReplyAction="http://tempuri.org/IGamePlay/GetQuestionResponse")]
        System.Threading.Tasks.Task<GameClient.GameServiceReference.Question> GetQuestionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGamePlay/AnswerQuestion", ReplyAction="http://tempuri.org/IGamePlay/AnswerQuestionResponse")]
        void AnswerQuestion(string clientname, GameClient.GameServiceReference.Question q, string answer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGamePlay/AnswerQuestion", ReplyAction="http://tempuri.org/IGamePlay/AnswerQuestionResponse")]
        System.Threading.Tasks.Task AnswerQuestionAsync(string clientname, GameClient.GameServiceReference.Question q, string answer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGamePlay/ShuffleQuestion", ReplyAction="http://tempuri.org/IGamePlay/ShuffleQuestionResponse")]
        GameClient.GameServiceReference.Question ShuffleQuestion();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGamePlay/ShuffleQuestion", ReplyAction="http://tempuri.org/IGamePlay/ShuffleQuestionResponse")]
        System.Threading.Tasks.Task<GameClient.GameServiceReference.Question> ShuffleQuestionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGamePlay/StartGame", ReplyAction="http://tempuri.org/IGamePlay/StartGameResponse")]
        void StartGame();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGamePlay/StartGame", ReplyAction="http://tempuri.org/IGamePlay/StartGameResponse")]
        System.Threading.Tasks.Task StartGameAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGamePlayChannel : GameClient.GameServiceReference.IGamePlay, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GamePlayClient : System.ServiceModel.ClientBase<GameClient.GameServiceReference.IGamePlay>, GameClient.GameServiceReference.IGamePlay {
        
        public GamePlayClient() {
        }
        
        public GamePlayClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GamePlayClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GamePlayClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GamePlayClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AssignClient() {
            base.Channel.AssignClient();
        }
        
        public System.Threading.Tasks.Task AssignClientAsync() {
            return base.Channel.AssignClientAsync();
        }
        
        public void PauseGame() {
            base.Channel.PauseGame();
        }
        
        public System.Threading.Tasks.Task PauseGameAsync() {
            return base.Channel.PauseGameAsync();
        }
        
        public GameClient.GameServiceReference.Question GetQuestion() {
            return base.Channel.GetQuestion();
        }
        
        public System.Threading.Tasks.Task<GameClient.GameServiceReference.Question> GetQuestionAsync() {
            return base.Channel.GetQuestionAsync();
        }
        
        public void AnswerQuestion(string clientname, GameClient.GameServiceReference.Question q, string answer) {
            base.Channel.AnswerQuestion(clientname, q, answer);
        }
        
        public System.Threading.Tasks.Task AnswerQuestionAsync(string clientname, GameClient.GameServiceReference.Question q, string answer) {
            return base.Channel.AnswerQuestionAsync(clientname, q, answer);
        }
        
        public GameClient.GameServiceReference.Question ShuffleQuestion() {
            return base.Channel.ShuffleQuestion();
        }
        
        public System.Threading.Tasks.Task<GameClient.GameServiceReference.Question> ShuffleQuestionAsync() {
            return base.Channel.ShuffleQuestionAsync();
        }
        
        public void StartGame() {
            base.Channel.StartGame();
        }
        
        public System.Threading.Tasks.Task StartGameAsync() {
            return base.Channel.StartGameAsync();
        }
    }
}
